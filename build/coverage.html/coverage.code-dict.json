{"/home/travis/build/npmtest/node-npmtest-grunt-string-replace/test.js":"/* istanbul instrument in package npmtest_grunt_string_replace */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-string-replace/lib.npmtest_grunt_string_replace.js":"/* istanbul instrument in package npmtest_grunt_string_replace */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_string_replace = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_string_replace = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-string-replace/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-string-replace && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_string_replace */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_string_replace\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_string_replace.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_string_replace.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_string_replace.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_string_replace.__dirname + '/lib.npmtest_grunt_string_replace.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-string-replace/node_modules/grunt-string-replace/tasks/string-replace.js":"/*\n * grunt-string-replace\n * https://github.com/eruizdechavez/grunt-string-replace\n *\n * Copyright (c) 2016 Erick Ruiz de Chavez\n * Licensed under the MIT license.\n */\n\nmodule.exports = function(grunt) {\n  'use strict';\n\n  // if grunt is not provided, then expose internal API\n  if ('object' !== typeof(grunt)) {\n    return require('./lib/string-replace').init(require('grunt'));\n  }\n\n  var string_replace = require('./lib/string-replace').init(grunt);\n\n  grunt.registerMultiTask('string-replace', 'String Replace Task.', function() {\n    var done = this.async(),\n      options = this.options({\n        replacements: []\n      }),\n      replacements;\n\n    replacements = string_replace.normalize_replacements(options.replacements);\n\n    string_replace.replace(this.files, replacements, options, done);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-string-replace/node_modules/grunt-string-replace/Gruntfile.js":"/*\n * grunt-string-replace\n * https://github.com/eruizdechavez/grunt-string-replace\n *\n * Copyright (c) 2016 Erick Ruiz de Chavez\n * Licensed under the MIT license.\n */\n\nmodule.exports = function(grunt) {\n  'use strict';\n\n  grunt.initConfig({\n    base: {\n      env: {\n        test: 'replaced!'\n      }\n    },\n\n    package: {\n      replacement: 'replaced!'\n    },\n\n    jshint: {\n      options: {\n        curly: true,\n        eqeqeq: true,\n        immed: true,\n        latedef: true,\n        newcap: true,\n        noarg: true,\n        sub: true,\n        undef: true,\n        boss: true,\n        eqnull: true,\n        node: true\n      },\n      lint: ['Gruntfile.js', 'tasks/**/*.js', 'test/**/*.js']\n    },\n\n    clean: ['tmp/', 'tmp_baz/'],\n\n    nodeunit: {\n      files: ['test/**/*.js']\n    },\n\n    watch: {\n      files: '<%= jshint.lint %>',\n      tasks: ['jshint', 'test']\n    },\n\n    copy: {\n      fixtures: {\n        files: [{\n          dest: 'tmp/foo/1.txt',\n          src: 'test/fixtures/foo.txt'\n        }, {\n          dest: 'tmp/foo/2.txt',\n          src: 'test/fixtures/foo.txt'\n        }, {\n          dest: 'tmp/bar/1.txt',\n          src: 'test/fixtures/foo.txt'\n        }, {\n          dest: 'tmp/bar/2.txt',\n          src: 'test/fixtures/foo.txt'\n        }]\n      }\n    },\n\n    'string-replace': {\n      single_file: {\n        files: {\n          'tmp/foo.txt': 'test/fixtures/foo.txt',\n          'tmp/baz.txt': 'test/fixtures/baz.txt'\n        },\n        options: {\n          replacements: [{\n            pattern: '[test:string]',\n            replacement: 'replaced!'\n          }, {\n            pattern: /\\[test a:regex \\d{3,}\\]/,\n            replacement: 'replaced!'\n          }, {\n            pattern: /\\[test b:regex \\d{3,}\\]/g,\n            replacement: 'replaced!'\n          }, {\n            pattern: /\\[test c:regex \\d{3,}\\]/g,\n            replacement: 'replaced!'\n          }, {\n            pattern: /\\[test d:regex \\d{3,}\\]/ig,\n            replacement: 'replaced!'\n          }, {\n            pattern: /\\[test e:regex \\d{3,}\\]/ig,\n            replacement: '<%= package.replacement %>'\n          }, {\n            pattern: /\\[test f:regex \\d{3,}\\]/g,\n            replacement: function(match, p1) {\n              var env = grunt.option('env').toLowerCase();\n              return grunt.config.get(['base', 'env', env]);\n            }\n          }]\n        }\n      },\n      mutli_same_path: {\n        files: {\n          'tmp/foo/': 'tmp/foo/*.txt'\n        },\n        options: {\n          replacements: [{\n            pattern: '[test:string]',\n            replacement: 'replaced!'\n          }, {\n            pattern: /\\[test a:regex \\d{3,}\\]/,\n            replacement: 'replaced!'\n          }, {\n            pattern: /\\[test b:regex \\d{3,}\\]/g,\n            replacement: 'replaced!'\n          }, {\n            pattern: /\\[test c:regex \\d{3,}\\]/g,\n            replacement: 'replaced!'\n          }, {\n            pattern: /\\[test d:regex \\d{3,}\\]/ig,\n            replacement: 'replaced!'\n          }, {\n            pattern: /\\[test e:regex \\d{3,}\\]/ig,\n            replacement: '<%= package.replacement %>'\n          }, {\n            pattern: /\\[test f:regex \\d{3,}\\]/g,\n            replacement: function(match, p1) {\n              var env = grunt.option('env').toLowerCase();\n              return grunt.config.get(['base', 'env', env]);\n            }\n          }]\n        }\n      },\n      mutli_diff_path: {\n        files: {\n          'tmp_baz/': 'tmp/bar/*.txt'\n        },\n        options: {\n          replacements: [{\n            pattern: '[test:string]',\n            replacement: 'replaced!'\n          }, {\n            pattern: /\\[test a:regex \\d{3,}\\]/,\n            replacement: 'replaced!'\n          }, {\n            pattern: /\\[test b:regex \\d{3,}\\]/g,\n            replacement: 'replaced!'\n          }, {\n            pattern: /\\[test c:regex \\d{3,}\\]/g,\n            replacement: 'replaced!'\n          }, {\n            pattern: /\\[test d:regex \\d{3,}\\]/ig,\n            replacement: 'replaced!'\n          }, {\n            pattern: /\\[test e:regex \\d{3,}\\]/ig,\n            replacement: '<%= package.replacement %>'\n          }, {\n            pattern: /\\[test f:regex \\d{3,}\\]/g,\n            replacement: function(match, p1) {\n              var env = grunt.option('env').toLowerCase();\n              return grunt.config.get(['base', 'env', env]);\n            }\n          }]\n        }\n      }\n    }\n  });\n\n  // Load nom tasks.\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-contrib-copy');\n\n  // Load local tasks.\n  grunt.loadTasks('tasks');\n\n  grunt.registerTask('test', ['clean', 'copy', 'string-replace', 'nodeunit']);\n  grunt.registerTask('default', ['jshint', 'test']);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-string-replace/node_modules/grunt-string-replace/tasks/lib/string-replace.js":"/*\n * grunt-string-replace\n * https://github.com/eruizdechavez/grunt-string-replace\n *\n * Copyright (c) 2016 Erick Ruiz de Chavez\n * Licensed under the MIT license.\n */\nvar util = require('util'),\n  async = require('async'),\n  chalk = require('chalk'),\n  counter = 0;\n\nexports.init = function(grunt) {\n  'use strict';\n\n  var path = require('path');\n\n  var detectDestType = function(dest) {\n    if (dest[dest.length - 1] === '/') {\n      return 'directory';\n    } else {\n      return 'file';\n    }\n  };\n\n  var unixifyPath = function(filepath) {\n    var path = '';\n    if (process.platform === 'win32') {\n      path = filepath.replace(/\\\\/g, '/');\n    } else {\n      path = filepath;\n    }\n    return path;\n  };\n\n  exports.replace = function(files, replacements, options, replace_done) {\n    var content, newContent, dest;\n\n    if (!replace_done) {\n      replace_done = options;\n      options = {};\n    }\n\n    if (!options.hasOwnProperty(\"saveUnchanged\")) {\n      options.saveUnchanged = true;\n    } else {\n      options.saveUnchanged = !!options.saveUnchanged;\n    }\n\n    async.forEach(files, function(file, files_done) {\n      async.forEach(file.src, function(src, src_done) {\n        grunt.log.debug('working on file', src);\n\n        if (!grunt.file.exists(src)) {\n          grunt.log.debug('file not fount', src);\n          return src_done(src + ' file not found');\n        }\n\n        if (grunt.file.isDir(src)) {\n          grunt.log.debug('source file is a directory', src);\n          return src_done();\n        }\n\n        if (detectDestType(file.dest) === 'directory') {\n          grunt.log.debug('destination is a directory');\n\n          if (grunt.file.doesPathContain(file.dest, src)) {\n            dest = path.join(file.dest, src.replace(file.dest, ''));\n          } else {\n            dest = path.join(file.dest, src);\n          }\n        } else {\n          dest = file.dest;\n        }\n\n        dest = unixifyPath(dest);\n        grunt.log.debug('unixified path is', dest);\n        content = grunt.file.read(src);\n        newContent = exports.multi_str_replace(content, replacements, src, dest);\n\n        if (content !== newContent || options.saveUnchanged) {\n          grunt.file.write(dest, newContent);\n          counter+=1;\n          grunt.verbose.writeln('File ' + chalk.cyan(dest) + ' created.');\n        } else {\n          grunt.log.writeln('File ' + chalk.cyan(dest) + ' ' + chalk.red('not') + ' created; No replacements found.');\n        }\n\n        return src_done();\n\n      }, files_done);\n    }, function(err) {\n      if (err) {\n        grunt.log.error(err);\n        replace_done(false);\n      }\n        grunt.log.writeln('\\n'+ chalk.cyan(counter) + ' files created');\n      replace_done();\n    });\n  };\n\n  exports.normalize_replacements = function(replacements) {\n    return replacements.map(function(replacement) {\n      return [replacement.pattern, replacement.replacement];\n    });\n  };\n\n  var decorate_replace_function = function(replacement, src, dest) {\n    grunt.log.debug('decorating replace function with extra arguments');\n\n    return function () {\n      grunt.log.debug('running decorated replace function with extra arguments');\n      var args = Array.prototype.slice.apply(arguments);\n      args.push(src, dest);\n      return replacement.apply(null, args);\n    };\n  };\n\n  exports.multi_str_replace = function(string, replacements, src, dest) {\n    return replacements.reduce(function(content, replacements) {\n      var pattern = replacements[0];\n      var replacement = replacements[1];\n\n      if (typeof replacement === 'function') {\n        grunt.log.debug('replacing function with augmented one');\n        replacement = decorate_replace_function(replacement, src, dest);\n      }\n\n      return content.replace(pattern, replacement);\n    }, string);\n  };\n\n  return exports;\n};\n"}